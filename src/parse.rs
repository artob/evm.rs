// This is free and unencumbered software released into the public domain.

use ethnum::u256;

use crate::opcode::Opcode;

pub fn parse_opcode(input: &str) -> Option<Opcode> {
    use Opcode::*;
    let opcode = match input {
        "STOP" => STOP,
        "ADD" => ADD,
        "MUL" => MUL,
        "SUB" => SUB,
        "DIV" => DIV,
        "SDIV" => SDIV,
        "MOD" => MOD,
        "SMOD" => SMOD,
        "ADDMOD" => ADDMOD,
        "MULMOD" => MULMOD,
        "EXP" => EXP,
        "SIGNEXTEND" => SIGNEXTEND,
        "LT" => LT,
        "GT" => GT,
        "SLT" => SLT,
        "SGT" => SGT,
        "EQ" => EQ,
        "ISZERO" => ISZERO,
        "AND" => AND,
        "OR" => OR,
        "XOR" => XOR,
        "NOT" => NOT,
        "BYTE" => BYTE,
        "SHL" => SHL,
        "SHR" => SHR,
        "SAR" => SAR,
        "SHA3" => SHA3,
        "ADDRESS" => ADDRESS,
        "BALANCE" => BALANCE,
        "ORIGIN" => ORIGIN,
        "CALLER" => CALLER,
        "CALLVALUE" => CALLVALUE,
        "CALLDATALOAD" => CALLDATALOAD,
        "CALLDATASIZE" => CALLDATASIZE,
        "CALLDATACOPY" => CALLDATACOPY,
        "CODESIZE" => CODESIZE,
        "CODECOPY" => CODECOPY,
        "GASPRICE" => GASPRICE,
        "EXTCODESIZE" => EXTCODESIZE,
        "EXTCODECOPY" => EXTCODECOPY,
        "RETURNDATASIZE" => RETURNDATASIZE,
        "RETURNDATACOPY" => RETURNDATACOPY,
        "EXTCODEHASH" => EXTCODEHASH,
        "BLOCKHASH" => BLOCKHASH,
        "COINBASE" => COINBASE,
        "TIMESTAMP" => TIMESTAMP,
        "NUMBER" => NUMBER,
        "DIFFICULTY" => DIFFICULTY,
        "GASLIMIT" => GASLIMIT,
        "CHAINID" => CHAINID,
        "SELFBALANCE" => SELFBALANCE,
        "BASEFEE" => BASEFEE,
        "POP" => POP,
        "MLOAD" => MLOAD,
        "MSTORE" => MSTORE,
        "MSTORE8" => MSTORE8,
        "SLOAD" => SLOAD,
        "SSTORE" => SSTORE,
        "JUMP" => JUMP,
        "JUMPI" => JUMPI,
        "PC" => PC,
        "MSIZE" => MSIZE,
        "GAS" => GAS,
        "JUMPDEST" => JUMPDEST,
        "PUSH1" => PUSH1(0),
        "PUSH2" => PUSHn(2, u256::ZERO, vec![0; 2]),
        "PUSH3" => PUSHn(3, u256::ZERO, vec![0; 3]),
        "PUSH4" => PUSHn(4, u256::ZERO, vec![0; 4]),
        "PUSH5" => PUSHn(5, u256::ZERO, vec![0; 5]),
        "PUSH6" => PUSHn(6, u256::ZERO, vec![0; 6]),
        "PUSH7" => PUSHn(7, u256::ZERO, vec![0; 7]),
        "PUSH8" => PUSHn(8, u256::ZERO, vec![0; 8]),
        "PUSH9" => PUSHn(9, u256::ZERO, vec![0; 9]),
        "PUSH10" => PUSHn(10, u256::ZERO, vec![0; 10]),
        "PUSH11" => PUSHn(11, u256::ZERO, vec![0; 11]),
        "PUSH12" => PUSHn(12, u256::ZERO, vec![0; 12]),
        "PUSH13" => PUSHn(13, u256::ZERO, vec![0; 13]),
        "PUSH14" => PUSHn(14, u256::ZERO, vec![0; 14]),
        "PUSH15" => PUSHn(15, u256::ZERO, vec![0; 15]),
        "PUSH16" => PUSHn(16, u256::ZERO, vec![0; 16]),
        "PUSH17" => PUSHn(17, u256::ZERO, vec![0; 17]),
        "PUSH18" => PUSHn(18, u256::ZERO, vec![0; 18]),
        "PUSH19" => PUSHn(19, u256::ZERO, vec![0; 19]),
        "PUSH20" => PUSHn(20, u256::ZERO, vec![0; 20]),
        "PUSH21" => PUSHn(21, u256::ZERO, vec![0; 21]),
        "PUSH22" => PUSHn(22, u256::ZERO, vec![0; 22]),
        "PUSH23" => PUSHn(23, u256::ZERO, vec![0; 23]),
        "PUSH24" => PUSHn(24, u256::ZERO, vec![0; 24]),
        "PUSH25" => PUSHn(25, u256::ZERO, vec![0; 25]),
        "PUSH26" => PUSHn(26, u256::ZERO, vec![0; 26]),
        "PUSH27" => PUSHn(27, u256::ZERO, vec![0; 27]),
        "PUSH28" => PUSHn(28, u256::ZERO, vec![0; 28]),
        "PUSH29" => PUSHn(29, u256::ZERO, vec![0; 29]),
        "PUSH30" => PUSHn(30, u256::ZERO, vec![0; 30]),
        "PUSH31" => PUSHn(31, u256::ZERO, vec![0; 31]),
        "PUSH32" => PUSHn(32, u256::ZERO, vec![0; 32]),
        "DUP1" => DUP(1),
        "DUP2" => DUP(2),
        "DUP3" => DUP(3),
        "DUP4" => DUP(4),
        "DUP5" => DUP(5),
        "DUP6" => DUP(6),
        "DUP7" => DUP(7),
        "DUP8" => DUP(8),
        "DUP9" => DUP(9),
        "DUP10" => DUP(10),
        "DUP11" => DUP(11),
        "DUP12" => DUP(12),
        "DUP13" => DUP(13),
        "DUP14" => DUP(14),
        "DUP15" => DUP(15),
        "DUP16" => DUP(16),
        "SWAP1" => SWAP(1),
        "SWAP2" => SWAP(2),
        "SWAP3" => SWAP(3),
        "SWAP4" => SWAP(4),
        "SWAP5" => SWAP(5),
        "SWAP6" => SWAP(6),
        "SWAP7" => SWAP(7),
        "SWAP8" => SWAP(8),
        "SWAP9" => SWAP(9),
        "SWAP10" => SWAP(10),
        "SWAP11" => SWAP(11),
        "SWAP12" => SWAP(12),
        "SWAP13" => SWAP(13),
        "SWAP14" => SWAP(14),
        "SWAP15" => SWAP(15),
        "SWAP16" => SWAP(16),
        "LOG0" => LOG(0),
        "LOG1" => LOG(1),
        "LOG2" => LOG(2),
        "LOG3" => LOG(3),
        "LOG4" => LOG(4),
        "CREATE" => CREATE,
        "CALL" => CALL,
        "CALLCODE" => CALLCODE,
        "RETURN" => RETURN,
        "DELEGATECALL" => DELEGATECALL,
        "CREATE2" => CREATE2,
        "STATICCALL" => STATICCALL,
        "REVERT" => REVERT,
        "INVALID" => INVALID,
        "SELFDESTRUCT" => SELFDESTRUCT,
        _ => return None,
    };
    Some(opcode)
}
